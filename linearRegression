from random import seed,randrange
from csv import reader
from math import sqrt
import matplotlib.pyplot as plt
import numpy as np

def load_csv(filename):
	dataset = []
	with open(filename, 'r') as file:
		csv_reader = reader(file)
		for row in csv_reader:
			if not row:
				continue
			dataset.append(row)
	return dataset
 
def str_column_to_float(dataset, column):
	for row in dataset:
		row[column] = float(row[column].strip())
 
def split(dataset):
	train = []
	train_size = 0.7 * len(dataset)
	dataset_copy = list(dataset)
	while len(train) < train_size:
		index = randrange(len(dataset_copy))
		train.append(dataset_copy.pop(index))
	return train, dataset_copy
 
def rmse_metric(actual, predicted):
	sum_error = 0.0
	for i in range(len(actual)):
		prediction_error = predicted[i] - actual[i]
		sum_error += (prediction_error ** 2)
	mean_error = sum_error / float(len(actual))
	return sqrt(mean_error)
 
def evaluate_algorithm(dataset):
	train, test = split(dataset)
	x1 = [row[0] for row in test]
	y1 = [row[1] for row in test]
	plt.scatter(x1,y1,color='g')
	test_set = []
	for row in test:
		row_copy = list(row)
		row_copy[-1] = None
		test_set.append(row_copy)
	predicted = regression(train, test_set)
	actual = [row[1] for row in test]
	rmse = rmse_metric(actual, predicted)
	return rmse
 
def mean(values):
	return sum(values) / float(len(values))
 
def covariance(x, mean_x, y, mean_y):
	covar = 0.0
	for i in range(len(x)):
		covar += (x[i] - mean_x) * (y[i] - mean_y)
	return covar
 
def variance(values, mean):
	return sum([(x-mean)**2 for x in values])
 
def coefficients(dataset):
	x = [row[0] for row in dataset]
	y = [row[1] for row in dataset]
	plt.scatter(x,y,color='r')
	x_mean, y_mean = mean(x), mean(y)
	b1 = covariance(x, x_mean, y, y_mean) / variance(x, x_mean)
	b0 = y_mean - b1 * x_mean
	return [b0, b1]

def regression(train, test):
	predictions = []
	b0, b1 = coefficients(train)
	x = np.linspace(0,130,10)
	y = b1*x+b0
	plt.plot(x, y, 'b')
	for row in test:
		ypre = b0 + b1*row[0]
		predictions.append(ypre)
	return predictions

seed(1)
filename = '1.csv'
dataset = load_csv(filename)
for i in range(len(dataset[0])):
	str_column_to_float(dataset, i)
rmse = evaluate_algorithm(dataset)
print('RMSE: %.3f' % (rmse))

plt.show()
